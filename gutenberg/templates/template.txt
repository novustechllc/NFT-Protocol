module nft_protocol::{module_name} {{
    use sui::tx_context::{{Self, TxContext}};

    use std::vector;
    
    use nft_protocol::collection::{{MintAuthority}};
    use nft_protocol::{market_module}::{{Self, {market_type}}};
    use nft_protocol::slingshot::Slingshot;
    use nft_protocol::std_collection;
    use nft_protocol::{nft_type};

    struct {witness} has drop {{}}

    fun init(witness: {witness}, ctx: &mut TxContext) {{
        let tags = {tags};

        std_collection::mint<{witness}>(
            b"{name}",
            b"{description}",
            b"{symbol}",
            {max_supply},
            {blind_supply},
            {receiver},
            tags,
            {royalty_fee_bps},
            {is_mutable},
            b"{extra_data}",
            tx_context::sender(ctx),
            ctx,
        );

        fixed_price::create_single_market(
            witness,
            tx_context::sender(ctx), // admin
            {receiver},
            {is_embedded},
            {whitelist},
            {price},
            ctx,
        );
    }}

    public entry fun mint_nft(
        index: u64,
        name: vector<u8>,
        description: vector<u8>,
        url: vector<u8>,
        attribute_keys: vector<vector<u8>>,
        attribute_values: vector<vector<u8>>,
        mint_authority: &mut MintAuthority<{witness}>,
        sale_index: u64,
        launchpad: &mut Slingshot<{witness}, {market_type}>,
        ctx: &mut TxContext,
    ) {{
        {nft_type}::launchpad_mint_limited_collection_nft(
            index,
            name,
            description,
            url,
            attribute_keys,
            attribute_values,
            mint_authority,
            sale_index,
            launchpad,
            ctx,
        );
    }}
}}
